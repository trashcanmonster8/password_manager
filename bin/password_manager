#!/usr/bin/env ruby
# frozen_string_literal: true

require 'password_manager'
require 'thor'
require 'yaml'

class Application < Thor
  FILE = '~/.creds'
  DEFAULT_CREDS = {
    username: nil,
    password: nil,
    opts: {
      min_length: 12,
      max_length: 20,
      mix_case: true,
      special_chars: true
    }
  }.freeze

  desc 'version', 'Display password_manager version'
  def version
    say "password_manager v#{PasswordManager::VERSION}\n"
  end

  desc 'password', 'Create a random password'
  option :min_length, type: :numeric, default: 12, aliases: '-m'
  option :max_length, type: :numeric, default: 20, aliases: '-M'
  option :mix_case, type: :boolean, default: true, aliases: '-c'
  option :special_chars, type: :boolean, default: true, aliases: '-s'
  def password
    say PasswordManager::Password.new(**symbolize_options(options)).update
  end

  desc 'ls', 'List credentials'
  option :username, default: false, aliases: '-u'
  option :all, default: false, aliases: '-a'
  def ls
    creds = load
    output = creds.collect do |account, cred|
      out = account.dup
      out << " - #{cred[:username]}" if options[:username] || options[:all]
      out << " - #{cred[:password]}" if options[:all]
      out
    end
    say output.join("\n")
  end

  desc 'view', 'View specific credential'
  def view(cred)
    creds = load[cred]
    say "#{cred} - #{creds[:username]} - #{creds[:password]} \n"
  end

  desc 'update', 'Update credentials'
  option :username, type: :string, aliases: '-u'
  option :password, type: :string, aliases: '-p'
  option :min_length, type: :numeric, default: 12, aliases: '-m'
  option :max_length, type: :numeric, default: 20, aliases: '-M'
  option :mix_case, type: :boolean, default: true, aliases: '-c'
  option :special_chars, type: :boolean, default: true, aliases: '-s'
  def update(cred)
    creds = load
    new_creds = creds[cred] || DEFAULT_CREDS.dup
    opts = symbolize_options(options)
    new_creds[:username] = opts.delete(:username) if opts[:username]
    new_creds[:password] = if opts[:password]
                             opts.delete(:password)
                           else
                             PasswordManager::Password.new(**opts).update
                           end
    new_creds[:opts] = new_creds[:opts].merge(opts)
    creds[cred] = new_creds
    save(creds)
    say "#{new_creds[:username]}\n#{new_creds[:password]}"
  end

  desc 'delete', 'Remove credentials from file'
  def delete(cred)
    creds = load
    creds.delete(cred)
    save(creds)
    say "Removed #{cred}"
  end

  private

  def load
    path = File.expand_path(FILE)
    File.realpath(path)
    text = File.read(path)
    YAML.safe_load(text, [Symbol])
  end

  def save(creds)
    file = File.open(File.expand_path(FILE), 'w+')
    file.write(creds.to_yaml)
  end

  def symbolize_options(options)
    hash = options.to_hash
    hash.keys.each do |key|
      hash[(begin
              key.to_sym
            rescue StandardError
              key
            end) || key] = hash.delete(key)
    end
    hash
  end
end

Application.start
